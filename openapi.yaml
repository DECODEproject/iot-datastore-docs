openapi: 3.0.0
info:
  version: v0.3.9
  title: DECODE Encrypted Datastore JSON API
  contact:
    email: support@thingful.net
    url: 'https://decodeproject.eu'
  license:
    name: GNU Affero General Public License
    url: 'https://www.gnu.org/licenses/agpl.html'
  x-logo:
    url: 'https://decodeproject.eu/sites/default/files/favicon_13.png'
  description: |
    This is some documentation for the Encrypted Datastore component developed as part of the IoT pilot
    for [DECODE](https://decodeproject.eu).

    # Introduction
    The purpose of this component is to provide a service that allows encrypted events generated by IoT devices to be stored and queried against.

    The server implementation was created using a tool called [Twirp](https://twitchtv.github.io/twirp/),
    which  uses [Protocol Buffers](https://developers.google.com/protocol-buffers/) in order to
    specify an RPC style interface to the service. For some programming languages we are able to generate a client directly from this
    definition, however for clients where that tooling isn't yet available, this document defines the JSON over
    HTTP interface that the service also exposes.

    Note that this RPC interface is definitely not RESTful in structure, rather all requests are constructed and sent as POST requests to the server.

    If you are developing a client application in Go or Python, you should use the generated client libraries:

    * Go - https://github.com/thingful/twirp-datastore-go
    * Python - https://pypi.org/project/decode-datastore-client/
tags:
  - name: Read Events
    description: Operations to read data from the datastore
  - name: Write Events
    description: Operations to write data from the datastore
servers:
  - url: 'https://datastore.decodeproject.eu/twirp/decode.iot.datastore.Datastore/'
paths:
  /ReadData:
    post:
      tags:
        - Read Events
      summary: Read encrypted events
      description: |
        Endpoint which allows a caller to read encrypted events from the datastore. Events are encrypted using a tool called Zenroom (https://zenroom.dyne.org), also developed as part of DECODE, meaning that only an entity with the correct private key will be able to decrypt any data read from the datastore.

        A `Content-Type` header of `application/json` must be included else the server will try to decode using protocol buffers.
      operationId: read
      responses:
        '200':
          description: Successful read of data from the datastore
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadResponse'
        '400':
          description: Bad request sent by client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WriteError'
        5XX:
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WriteError'
              example:
                code: internal
                msg: database is unavailable
                meta:
                  cause: '*pg.Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadRequest'
  /WriteData:
    post:
      tags:
        - Write Events
      summary: Write encrypted events
      description: |
        Endpoint which allows a caller to write encrypted events to the datastore. The caller is responsible for encrypted the events before sending them to the datastore. For our purposes we encode messages using Zenroom before writing to the datastore.
      operationId: write
      responses:
        '200':
          description: Successful write to the datastore
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WriteResponse'
        '400':
          description: Bad request sent by client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WriteError'
        5XX:
          description: Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WriteError'
              example:
                code: internal
                msg: database is unavailable
                meta:
                  cause: '*pg.Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteRequest'
components:
  schemas:
    Cursor:
      type: string
      description: 'An opaque string that encodes pagination information that the server is able to interpret. This pagination string cannot be calculated by the client, rather this value can only be supplied by the server in a response to a read request.'
      example: l66G9M76XeWDSYf2Fu1tVRTau4OfCD7V7vAAMk6M00DwR0jMLnzvzVw8qzVgBLxv
    DeviceToken:
      description: A unique identifier for a device
      type: string
      example: ad52ba
    EncryptedEvent:
      type: object
      properties:
        event_time:
          description: RFC3339 timestamp representing the time at which the event was received by the datastore.
          type: string
          format: date-time
        data:
          description: Encrypted bytes encoded into a Base64 string
          type: string
          example: W1wszfBvAco+UAv52ntU1Zs4aO6OswwRWGqaB7uMQjWw3pPiRsolvgQZhqRBZjBZ...
      required:
        - event_time
        - data
    ErrorCode:
      type: string
      description: String indicating the type of the error
      enum:
        - internal
        - bad_request
        - unknown
        - invalid_argument
        - not_found
        - unavailable
      example: bad_request
    PageSize:
      type: integer
      description: The maximum number of events to be returned in the response. An error will be returned if more than the maximum of 1000 events is requested.
      default: 500
    PolicyId:
      description: The unique identifier of the policy for which data is being requested
      type: string
      example: BxnMkRZI
    ReadRequest:
      type: object
      properties:
        start_time:
          description: |
            RFC3339 timestamp representing the start of an interval for which we want to read data. It is an error for this value to be in the future or to be after the end_time field if provided.
          type: string
          format: date-time
        end_time:
          description: |
            RFC3339 timestamp representing the end of an interval for which we want to read data. It is an error for this value to be in the future. If omitted it defaults 'now'.
          type: string
          format: date-time
        page_cursor:
          $ref: '#/components/schemas/Cursor'
        page_size:
          $ref: '#/components/schemas/PageSize'
        policy_id:
          $ref: '#/components/schemas/PolicyId'
      required:
        - start_time
        - policy_id
    ReadResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/EncryptedEvent'
        next_page_cursor:
          $ref: '#/components/schemas/Cursor'
        policy_id:
          $ref: '#/components/schemas/PolicyId'
    WriteError:
      type: object
      properties:
        code:
          $ref: '#/components/schemas/ErrorCode'
        msg:
          type: string
          description: Short message describing the error
          example: policy_id is required
        meta:
          type: object
          description: Object containing key/value pairs of metadata describing the error in more detail
          example:
            argument: policy_id
    WriteRequest:
      type: object
      properties:
        data:
          description: String containing encrypted bytes created by Zenroom
          type: string
          format: byte
          example: VEJFFpJ+fnvsllqXAE07vLbcPX6nc+rg4LAVH9wn+qhZxHn4Qqt+n6t1FSwF801GOcqIsmcFw0tHSkczkLkvyZxu7yVGN0T/HibSiogVpskKO4AH0qfjZo6V/OSqshz7jxWtUVVk7i7q1wSRkriFmretKIX+wV44Q/k0IxbZjiU=
        device_token:
          $ref: '#/components/schemas/DeviceToken'
        policy_id:
          $ref: '#/components/schemas/PolicyId'
      required:
        - device_token
        - policy_id
        - data
    WriteResponse:
      type: object
  headers:
    ExpiresAfter:
      description: date in UTC when token expires
      schema:
        type: string
        format: date-time
